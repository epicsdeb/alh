From: Michael Davidsaver <mdavidsaver@bnl.gov>
Date: Tue, 9 Oct 2012 18:57:57 -0400
Subject: BEEPCMD

Add option to run arbitrary shell command instead of X bell

Command does not run from gui thread.  Command will not
be run concurrently.
---
 alConfig.c           |  33 +++++++++++++++++
 alh.h                |   1 +
 os/default/alAudio.c | 100 +++++++++++++++++++++++++++++++++++++++++++++++++--
 test.alhConfig       |   1 +
 4 files changed, 132 insertions(+), 3 deletions(-)

diff --git a/alConfig.c b/alConfig.c
index 50d0526..0d248be 100644
--- a/alConfig.c
+++ b/alConfig.c
@@ -444,6 +444,37 @@ int context,int caConnect,struct mainGroup *pmainGroup)
 		return;
 	}
 
+	if (strncmp(&buf[1],"BEEPCMD",7)==0) {
+            unsigned int start=8, end = strlen(buf) - 1;
+
+            /* skip leading whitespace to find start of command */
+            for(; start<=end && (buf[start]=='\t' || buf[start]==' '); start++) {}
+
+            if(start>end) {
+                print_error(buf, "expected argument after BEEPCMD");
+                return;
+            }
+
+            /* back track to trim trailing whitespace */
+            for(; end>=start && (buf[end]=='\0' || isspace(buf[end])); end--) {}
+
+            if(end>start) {
+                if(psetup.beepCmd)
+                    free(psetup.beepCmd);
+                psetup.beepCmd = malloc(end-start+2);
+                if(!psetup.beepCmd) {
+                    print_error(buf, "Not enough memory for BEEPCMD");
+                } else {
+                    memcpy(psetup.beepCmd, &buf[start], end-start+1);
+                    psetup.beepCmd[end-start+1] = '\0';
+                }
+            } else {
+                print_error(buf, "Missing argument for BEEPCMD");
+            }
+
+            return;
+        }
+
     if (strncmp(&buf[1],"HEARTBEATPV",11)==0) { /*HEARTBEATPV*/
 
 		if (pmainGroup->heartbeatPV.name) return;
@@ -777,6 +808,8 @@ void alWriteConfig(char *filename,struct mainGroup *pmainGroup)
 	if (!fw) return;
 	if (psetup.beepSevr > 1)
 		fprintf(fw,"$BEEPSEVERITY  %s\n",alhAlarmSeverityString[psetup.beepSevr]);
+        if (psetup.beepCmd)
+                fprintf(fw,"$BEEPCMD %s\n", psetup.beepCmd);
 	/*alWriteGroupConfig(fw,(SLIST *)&(pmainGroup->p1stgroup));*/
 	alWriteGroupConfig(fw,(SLIST *)pmainGroup);
 	fclose(fw);
diff --git a/alh.h b/alh.h
index 37feac8..f6f8928 100644
--- a/alh.h
+++ b/alh.h
@@ -181,6 +181,7 @@ struct setup {
 	char logFile[NAMEDEFAULT_SIZE];         /* alarm log file name */
 	char opModFile[NAMEDEFAULT_SIZE];       /* opMod log file name */
 	char saveFile[NAMEDEFAULT_SIZE];        /* save config file name */
+    char *beepCmd;                          /* Optional command in place of X bell*/
 	char soundFile[NAMEDEFAULT_SIZE];       /* sound wav file name */
 	char lockFileBase[NAMEDEFAULT_SIZE];    /* lock files basename */
 	short silenceForever;                   /* 1 - beepoff forever is true */
diff --git a/os/default/alAudio.c b/os/default/alAudio.c
index c6e36ab..85ad91e 100644
--- a/os/default/alAudio.c
+++ b/os/default/alAudio.c
@@ -18,13 +18,88 @@
  *
  */
 
+#include <assert.h>
 #include <stdlib.h>
+#include <stdio.h>
+#include <pthread.h>
+#include <unistd.h>
 
 #include <X11/Xlib.h>
 #include <X11/XKBlib.h>
 
 #include "alh.h"
 
+static pthread_mutex_t beep_lock = PTHREAD_MUTEX_INITIALIZER;
+static pthread_cond_t beep_wake = PTHREAD_COND_INITIALIZER;
+static pthread_once_t beep_setup = PTHREAD_ONCE_INIT;
+/* states: -2 done, -1 shutdown, 0 idle, 1 playing, 2 request play */
+static int beeping = 0;
+static pthread_t beeper;
+
+#define LOCK() assert(pthread_mutex_lock(&beep_lock)==0)
+#define UNLOCK() assert(pthread_mutex_unlock(&beep_lock)==0)
+
+static void beeper_shutdown(void)
+{
+    /* request shutdown and spin until beeper thread stops */
+    LOCK();
+    beeping = -1;
+    while(beeping!=-2) {
+        UNLOCK();
+        pthread_cond_broadcast(&beep_wake);
+        usleep(10000); /* 10ms */
+        LOCK();
+    }
+    /* thread is stopped now */
+    free(psetup.beepCmd);
+    psetup.beepCmd = NULL;
+
+    UNLOCK();
+}
+
+static void* beeper_thread(void* junk)
+{
+    LOCK();
+
+    atexit(&beeper_shutdown);
+
+    while(beeping>=0) {
+
+        assert(pthread_cond_wait(&beep_wake, &beep_lock)==0);
+
+        if(beeping==2) {
+            beeping=1;
+            UNLOCK();
+
+            system(psetup.beepCmd);
+
+            LOCK();
+            /* be careful not to overwrite the shutdown command */
+            if(beeping==1)
+                beeping=0;
+        }
+    }
+    UNLOCK();
+    beeping=-2;
+    return NULL;
+}
+
+static void setup(void)
+{
+    if(!psetup.beepCmd)
+        return;
+
+    if(pthread_create(&beeper, NULL, &beeper_thread, NULL)) {
+        printf("Error creating beeper thread!\n");
+        /* clear beepCmd so that future calls to alBeep() will
+         * call XBell().
+         */
+        free(psetup.beepCmd);
+        psetup.beepCmd = NULL;
+        return;
+    }
+}
+
 /* Audio device not implemented */
 
 /******************************************************
@@ -32,9 +107,28 @@
 ******************************************************/
 void alBeep(Display *displayBB)
 {
-	/* system("play /path/to/beep.wav"); */
-	XkbBell(displayBB,None,0,None);
-	return;
+    pthread_once(&beep_setup, &setup);
+
+    if(!psetup.beepCmd) {
+	    /* system("play /path/to/beep.wav"); */
+	    XkbBell(displayBB,None,0,None);
+	    return;
+    } else {
+        LOCK();
+
+        /* wakeup for new command.
+         * also if still waiting for wakeup
+         * if beeper didn't start fast enough
+         * on the previous call.
+         */
+        if(beeping==0 || beeping==2) {
+            beeping=2;
+            pthread_cond_broadcast(&beep_wake);
+        }
+
+        UNLOCK();
+        return;
+    }
 }
 
 
diff --git a/test.alhConfig b/test.alhConfig
index 2475da1..84c96c8 100644
--- a/test.alhConfig
+++ b/test.alhConfig
@@ -1,3 +1,4 @@
+$BEEPCMD sleep 5;date -R >> alhtest
 $BEEPSEVERITY  MAJOR
 GROUP    NULL                         JBA_TEST_MAIN_GROUP                       
 $COMMAND  xload
